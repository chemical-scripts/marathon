#!/bin/bash
VERSION=0.8.0

# Usage:
#   marathon [-n processors] program inputfile [inputfile...]
#   marathon -h
#   marathon -v

function version_page {
  echo "$(basename "$0")" "$VERSION"
}

function help_page {
  version_page
  sed -ne '/#[^!]\(.*\)/{
    /\/#/d
    s/    //
    s/# //p
  }' "$0"
}

TEMP_FOLDER=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
nprocs=1

function cleanup {
  rm -rf "$TEMP_FOLDER"
}

trap cleanup EXIT

# Options:
while getopts ":hvn:" opt "$@"; do
  case $opt in
    h)
      # -h show this help message
      help_page
      exit 0
      ;;
    v)
      # -v show version
      version_page
      exit 0
      ;;
    n)
      # -n PROCS set number of processors (does not currently work with GENNBO, MOPAC or ORCA)
      nprocs=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

program=$1
shift

# Examples:

function exec_adf {
  if [ -z $ADFBIN ]; then
    ADF=adf
  else
    ADF=$ADFBIN/adf
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".in")

  #  $ marathon -n 28 adf *f1.in *f2.in *eda.in
  "$ADF" -n "$nprocs" < "${inputfile_basename}.in" | \
    tee "${inputfile_basename}.out"

  mv TAPE21 "${inputfile_basename}.t21"
}

function exec_adfnbo {
  if [ -z "$ADFBIN" ]; then
    ADFNBO=adfnbo
  else
    ADFNBO=$ADFBIN/adfnbo
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".t21")

  mv "${inputfile_basename}.t21" TAPE21

  #  $ marathon adfnbo
  "$ADFNBO" <<eor
write
fock
spherical
end input
eor

  mv TAPE21 "${inputfile_basename}.t21"
  mv FILE47 "${inputfile_basename}.47"
}

function exec_gennbo {
  if [ -z "$GENNBOBIN" ]; then
    GENNBO=gennbo
  else
    GENNBO=$GENNBOBIN/gennbo
  fi

  inputfile=$1

  if [ ${inputfile: -4} == ".gen" ]; then
    inputfile_basename=$(basename "$inputfile" ".gen")

    #    $ marathon gennbo *.gen
    "$GENNBO" < "${inputfile_basename}.gen" > "${inputfile_basename}.nboout"
  elif [ ${inputfile: -3} == ".47" ]; then
    inputfile_basename=$(basename "$inputfile" ".47")

    #    $ marathon gennbo *.47
    "$GENNBO" < "${inputfile_basename}.47" > "${inputfile_basename}.nboout"
  fi
}

function exec_mopac {
  if [ -z "$MOPACBIN" ]; then
    MOPAC=mopac
  else
    MOPAC=$MOPACBIN/mopac
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".dat")

  #  $ marathon mopac one.dat two.dat
  "$MOPAC" "${inputfile_basename}"
  mopac_output_to_mop_and_xyz "${inputfile_basename}.out"
}

function mopac_output_to_mop_and_xyz {
  outputfile="$1"

  if [ -r "${outputfile/.out/.arc}" ]; then
    tac "${outputfile/.out/.arc}" | \
      grep "FINAL GEOMETRY OBTAINED" -m 1 -B 9999 | \
        tac | \
          sed -e '/FINAL GEOMETRY OBTAINED/d'  > "${outputfile/.out/.mop}" \
              -e 's/  \([A-Z][a-z]*\)[0-9]*\.[0-9]*\(  *\)/  \1\2       /'

    obabel -imop "${outputfile/.out/.mop}" -O "${outputfile/.out/.xyz}"

    mopcomment=$(sed -n -e '2p' "${outputfile/.out/.mop}")
    sed -i -e '2s/^.*$/'"${mopcomment}"'/' "${outputfile/.out/.xyz}"
  fi
}

function exec_nwchem {
  if [ -z $NWCHEMBIN ]; then
    NWCHEM=nwchem
  else
    NWCHEM=$NWCHEMBIN/nwchem
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".nw")

  #  $ marathon -n 2 nwchem *.nw
  mpirun -np "$nprocs" "$NWCHEM" "${inputfile_basename}.nw" | \
    tee "${inputfile_basename}.out"
}

function exec_orca {
  if [ -z $ORCABIN ]; then
    ORCA=orca
  else
    ORCA=$ORCABIN/orca
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".inp")

  #  $ marathon orca {methane,ethane,n-propane}.inp
  "$ORCA" "${inputfile_basename}.inp" | \
    tee "${inputfile_basename}.out"
}

function exec_orca4 {
  if [ -z "$ORCA4BIN" ]; then
    ORCA4=orca
  else
    ORCA4=$ORCA4BIN/orca
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".inp")

  #  $ marathon orca4 {methane,ethane,n-propane}.inp
  "$ORCA4" "${inputfile_basename}.inp" | \
    tee "${inputfile_basename}.out"
}

function exec_psi4 {
  if [ -z "$PSI4BIN" ]; then
    PSI4=psi4
  else
    PSI4=$PSI4BIN/psi4
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".dat")

  #  $ marathon psi4 benzene.dat
  "$PSI4" "${inputfile_basename}.dat" "${inputfile_basename}.out"
}

called_from=$(pwd)

for inputfile in "$@"; do
  if [ -r "$inputfile" ]; then
    cd "$(dirname "$inputfile")"

    case $program in
      adf)
        exec_adf "$inputfile"
        ;;
      adfnbo)
        exec_adfnbo "$inputfile"
        ;;
      gennbo)
        exec_gennbo "$inputfile"
        ;;
      mopac)
        exec_mopac "$inputfile"
        ;;
      nwchem)
        exec_nwchem "$inputfile"
        ;;
      orca)
        exec_orca "$inputfile"
        ;;
      orca4)
        exec_orca4 "$inputfile"
        ;;
      psi4)
        exec_psi4 "$inputfile"
        ;;
    esac
  else
    echo "  $inputfile does not exist or is not readable."
    exit 1
  fi

  cd "$called_from"
done

# Licensed under the MIT License (MIT)
