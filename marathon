#!/bin/bash
VERSION=1.5

# Usage:
#   marathon [-n processors] program inputfile [inputfile...]
#   marathon -h
#   marathon -v

function version_page {
  echo "$(basename "$0")" "$VERSION"
}

function help_page {
  version_page
  sed -ne '/#[^!]\(.*\)/{
    /\/#/d
    s/    //
    s/# //p
  }' "$0"
}

GENNBO_KEYWORDS="BNDIDX DIPOLE STERIC PLOT"
TEMP_FOLDER=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
nprocs=1

function cleanup {
  rm -rf "$TEMP_FOLDER"

  if [ ! -z "$PSI_SCRATCH" ]; then
    if [ ! -z "$prefix" ]; then
      rm -rf ${PSI_SCRATCH:?}/${prefix}*
    fi
  fi
}

trap cleanup EXIT

# Options:
while getopts ":hvn:" opt "$@"; do
  case $opt in
    h)
      # -h show this help message
      help_page
      exit 0
      ;;
    v)
      # -v show version
      version_page
      exit 0
      ;;
    n)
      # -n PROCS set number of processors (doesn't work with all programs, see below)
      nprocs=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

program=$1
shift

# Examples:

function exec_adf {
  if [ -z "$ADFBIN" ]; then
    ADF=adf
  else
    ADF=$ADFBIN/adf
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".in")

  #  $ marathon -n 28 adf *f1.in *f2.in *eda.in
  "$ADF" -n "$nprocs" < "${inputfile_basename}.in" > "${inputfile_basename}.out"

  mv TAPE10 "${inputfile_basename}.t10"
  mv TAPE15 "${inputfile_basename}.t15"
  mv TAPE21 "${inputfile_basename}.t21"
}

function exec_band {
  if [ -z "$ADFBIN" ]; then
    BAND=band
  else
    BAND=$ADFBIN/band
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".in")

  #  $ marathon band *.in
  NSCM="$nprocs" "$BAND" < "${inputfile_basename}.in" > "${inputfile_basename}.out"

  mv RUNKF "${inputfile_basename}.runkf"
}

function exec_adfnbo {
  if [ -z "$ADFBIN" ]; then
    ADFNBO=adfnbo
  else
    ADFNBO=$ADFBIN/adfnbo
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".t21")

  mv "${inputfile_basename}.t15" TAPE15
  mv "${inputfile_basename}.t21" TAPE21

  #  $ marathon adfnbo *.t21
  "$ADFNBO" <<eor
write
spherical
!fock
end input
eor

  mv FILE47 "${inputfile_basename}.47"
  sed -i "/\$NBO/s/BNDIDX NBONLMO=W AONBO=W AONLMO=W NLMOMO=W FILE=adfnbo DIST \$END/ PRINT=3 bndidx archive plot FILE=adfnbo NLMO \$END/" "${inputfile_basename}.47"
  exec_gennbo "${inputfile_basename}.47"

  "$ADFNBO" <<eor
spherical
copy
end input
eor

  "$ADFNBO" <<eor
spherical
read
end input
eor

  mv TAPE15 "${inputfile_basename}.t15"
  mv TAPE21 "${inputfile_basename}.t21"

  for i in adfnbo*; do
    mv $i ${i/adfnbo/${inputfile_basename}}
  done
}

function exec_adfnmr {
  if [ -z "$ADFBIN" ]; then
    ADFNMR=nmr
  else
    ADFNMR=$ADFBIN/nmr
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".t10")

  mv "${inputfile_basename}.t10" TAPE10
  mv "${inputfile_basename}.t21" TAPE21

  #  $ marathon adfnmr *.t10
  "$ADFNMR" <<eor > "${inputfile_basename}.nmrout"
NMR
End

Analysis
End
eor

  mv TAPE10 "${inputfile_basename}.t10"
  mv TAPE21 "${inputfile_basename}.t21"
}

function exec_adf2aim {
  if [ -z "$ADFBIN" ]; then
    ADF2AIM=adf2aim
  else
    ADF2AIM=$ADFBIN/adf2aim
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".t21")

  #  $ marathon adf2aim *.t21
  "$ADF2AIM" "${inputfile}"

  mv WFN "${inputfile_basename}.wfn"
  mv rdt21.res "${inputfile_basename}.rdt21.res"
}

function exec_dosx {
  if [ -z "$QEBIN" ]; then
    DOSX=dos.x
  else
    DOSX=$QEBIN/dos.x
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".in")

  #  $ marathon -n 6 dosx benzene.in
  mpirun -np "$nprocs" "$DOSX" < "${inputfile_basename}.in" > "${inputfile_basename}.out"
}

function exec_g09 {
  if [ -z "$G09BIN" ]; then
    G09=g09
  else
    G09=$G09BIN/g09
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".gjf")

  if grep -i -q '%chk=' "$(basename "$inputfile")"; then
    sed -i -e 's/%chk=.*/%chk='"$inputfile_basename"'/' "$(basename "$inputfile")"
  fi

  #  $ marathon g09 *.gjf
  "$G09" < "${inputfile_basename}.gjf" > "${inputfile_basename}.out"

  if grep -q '%chk='"$inputfile_basename" "$(basename -- "$inputfile")"; then
    formchk "${inputfile_basename}.chk"
  fi
}

function exec_gamess {
  if [ -z "$GAMESSBIN" ]; then
    GAMESS=rungms
  else
    GAMESS=$GAMESSBIN/rungms
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".inp")

  #  $ marathon -n 28 gamess *.inp
  "$GAMESS" "${inputfile_basename}" 00 1 "$nprocs" >& "${inputfile_basename}.out"
}

function exec_gennbo {
  if [ -z "$GENNBOBIN" ]; then
    if command -v gennbo6 >/dev/null 2>&1; then
      GENNBO=gennbo6
    else
      GENNBO=gennbo
    fi
  else
    GENNBO=$GENNBOBIN/gennbo6

    if [ ! -x "$GENNBO" ]; then
      GENNBO=$GENNBOBIN/gennbo
    fi
  fi

  inputfile=$1

  if [ ${inputfile: -4} == ".gen" ]; then
    inputfile_basename=$(basename "$inputfile" ".gen")

    sed -i "s/\$NBO ${GENNBO_KEYWORDS} /\$NBO /" "${inputfile_basename}.gen"
    sed -i "s/\$NBO /\$NBO ${GENNBO_KEYWORDS} /" "${inputfile_basename}.gen"
    sed -i "s/  \$END/ \$END/" "${inputfile_basename}.gen"

    #    $ marathon gennbo *.gen
    if [ "${GENNBO: -1}" == '6' ]; then
      "$GENNBO" "${inputfile_basename}.gen" > "${inputfile_basename}.nboout"
    else
      "$GENNBO" < "${inputfile_basename}.gen" > "${inputfile_basename}.nboout"
    fi
  elif [ ${inputfile: -3} == ".47" ]; then
    inputfile_basename=$(basename "$inputfile" ".47")

    sed -i "s/\$NBO ${GENNBO_KEYWORDS} /\$NBO /" "${inputfile_basename}.47"
    sed -i "s/\$NBO /\$NBO ${GENNBO_KEYWORDS} /" "${inputfile_basename}.47"
    sed -i "s/  \$END/ \$END/" "${inputfile_basename}.47"

    #    $ marathon gennbo *.47
    if [ "${GENNBO: -1}" == '6' ]; then
      "$GENNBO" "${inputfile_basename}.47" > "${inputfile_basename}.nboout"
    else
      "$GENNBO" < "${inputfile_basename}.47" > "${inputfile_basename}.nboout"
    fi
  fi
}

function exec_mopac {
  if [ -z "$MOPACBIN" ]; then
    MOPAC=mopac
  else
    MOPAC=$MOPACBIN/mopac
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".dat")

  #  $ marathon mopac one.dat two.dat
  "$MOPAC" "${inputfile_basename}"
  mopac_output_to_mop_and_xyz "${inputfile_basename}.out"
}

function mopac_output_to_mop_and_xyz {
  outputfile="$1"

  if [ -r "${outputfile/.out/.arc}" ]; then
    tac "${outputfile/.out/.arc}" | \
      grep "FINAL GEOMETRY OBTAINED" -m 1 -B 9999 | \
        tac | \
          sed -e '/FINAL GEOMETRY OBTAINED/d'  > "${outputfile/.out/.mop}" \
              -e 's/  \([A-Z][a-z]*\)[0-9]*\.[0-9]*\(  *\)/  \1\2       /'

    obabel -imop "${outputfile/.out/.mop}" -O "${outputfile/.out/.xyz}"

    mopcomment=$(sed -n -e '2p' "${outputfile/.out/.mop}")
    sed -i -e '2s/^.*$/'"${mopcomment}"'/' "${outputfile/.out/.xyz}"
  fi
}

function exec_nwchem {
  if [ -z "$NWCHEMBIN" ]; then
    NWCHEM=nwchem
  else
    NWCHEM=$NWCHEMBIN/nwchem
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".nw")

  #  $ marathon -n 2 nwchem *.nw
  mpirun -np "$nprocs" "$NWCHEM" "${inputfile_basename}.nw" > "${inputfile_basename}.out"
}

function exec_orca {
  if [ -z "$ORCABIN" ]; then
    ORCA=orca
  else
    ORCA=$ORCABIN/orca
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".inp")

  sed -i -e '/pal/,/end/{
    /nproc/d
  }' "${inputfile_basename}.inp"
  sed -i -e '/pal/{
    N
    s/^\s*%pal\s*end\s*$//
  }' "${inputfile_basename}.inp"

  printf "%%pal\n nprocs %d\nend\n" "${nprocs}" >> "${inputfile_basename}.inp"

  #  $ marathon -n 4 orca {methane,ethane,n-propane}.inp
  "$ORCA" "${inputfile_basename}.inp" > "${inputfile_basename}.out"
}

function exec_orca4 {
  if [ -z "$ORCA4BIN" ]; then
    ORCA4=orca
  else
    ORCA4=$ORCA4BIN/orca
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".inp")

  sed -i -e '/pal/,/end/{
    /nproc/d
  }' "${inputfile_basename}.inp"
  sed -i -e '/pal/{
    N
    s/^\s*%pal\s*end\s*$//
  }' "${inputfile_basename}.inp"

  printf "%%pal\n nprocs %d\nend\n" "${nprocs}" >> "${inputfile_basename}.inp"

  #  $ marathon -n 4 orca4 {methane,ethane,n-propane}.inp
  "$ORCA4" "${inputfile_basename}.inp" > "${inputfile_basename}.out"
}

function exec_psi4 {
  if [ -z "$PSI4BIN" ]; then
    PSI4=psi4
  else
    PSI4=$PSI4BIN/psi4
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".dat")

  prefix=$(md5sum ${inputfile} | awk '{print $1}')

  #  $ marathon -n 6 psi4 benzene.dat
  "$PSI4" -n "$nprocs" -p "${prefix}" \
    "${inputfile_basename}.dat" "${inputfile_basename}.out"

  if [ ! -z "$PSI_SCRATCH" ]; then
    rm -rf ${PSI_SCRATCH:?}/${prefix}*
  fi
}

function exec_pwx {
  if [ -z "$QEBIN" ]; then
    PWX=pw.x
  else
    PWX=$QEBIN/pw.x
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".in")

  #  $ marathon -n 6 pwx benzene.in
  mpirun -np "$nprocs" "$PWX" < "${inputfile_basename}.in" > "${inputfile_basename}.out"
}

called_from=$(pwd)

for inputfile in "$@"; do
  if [ -r "$inputfile" ]; then
    cd "$(dirname "$inputfile")" || exit

    case $program in
      adf)
        exec_adf "$inputfile"
        ;;
      adfnbo)
        exec_adfnbo "$inputfile"
        ;;
      adf2aim)
        exec_adf2aim "$inputfile"
        ;;
      adfnmr)
        exec_adfnmr "$inputfile"
        ;;
      band)
        exec_band "$inputfile"
        ;;
      dosx)
        exec_dosx "$inputfile"
        ;;
      g09)
        exec_g09 "$inputfile"
        ;;
      gamess)
        exec_gamess "$inputfile"
        ;;
      gennbo)
        exec_gennbo "$inputfile"
        ;;
      mopac)
        exec_mopac "$inputfile"
        ;;
      nwchem)
        exec_nwchem "$inputfile"
        ;;
      orca)
        exec_orca "$inputfile"
        ;;
      orca4)
        exec_orca4 "$inputfile"
        ;;
      psi4)
        exec_psi4 "$inputfile"
        ;;
      pwx)
        exec_pwx "$inputfile"
        ;;
    esac
  else
    echo "  $inputfile does not exist or is not readable."
    exit 1
  fi

  cd "$called_from" || exit
done

# Licensed under the MIT License (MIT)
