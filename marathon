#!/bin/bash
VERSION=0.4.0

# Usage:
#   marathon program inputfile [inputfile...]
#   marathon -h
#   marathon -v

function version_page {
  echo "$(basename "$0")" "$VERSION"
}

function help_page {
  version_page
  sed -ne '/#[^!]\(.*\)/{
    /\/#/d
    s/    //
    s/# //p
  }' "$0"
}

nprocs=1

# Options:
while getopts ":hvn:" opt "$@"; do
  case $opt in
    h)
      # -h show this help message
      help_page
      exit 0
      ;;
    v)
      # -v show version
      version_page
      exit 0
      ;;
    n)
      # -n number of processors
      nprocs=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

program=$1
shift

# Examples:

function exec_adf {
  if [ -z "$ADFBIN" ]; then
    ADF=adf
  else
    ADF=$ADFBIN/adf
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".in")

  #  $ marathon adf *f1.in *f2.in *eda.in
  "$ADF" -n "$nprocs" < "${inputfile_basename}.in" | \
    tee "${inputfile_basename}.out"

  mv TAPE21 "${inputfile_basename}.t21"
}

function exec_nwchem {
  if [ -z "$NWCHEMBIN" ]; then
    NWCHEM=nwchem
  else
    NWCHEM=$NWCHEMBIN/nwchem
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".nw")

  #  $ marathon nwchem *.nw
  mpirun -np "$nprocs" "$NWCHEM" "${inputfile_basename}.nw" | \
    tee "${inputfile_basename}.out"
}

function exec_orca {
  if [ -z "$ORCABIN" ]; then
    ORCA=orca
  else
    ORCA=$ORCABIN/orca
  fi

  inputfile=$1
  inputfile_basename=$(basename "$inputfile" ".inp")

  #  $ marathon orca {methane,ethane,n-propane}.inp
  "$ORCA" "${inputfile_basename}.inp" | \
    tee "${inputfile_basename}.out"
}

called_from=$(pwd)

for inputfile in "$@"; do
  if [ -r "$inputfile" ]; then
    cd "$(dirname "$inputfile")"

    case $program in
      adf)
        exec_adf "$inputfile"
        ;;
      nwchem)
        exec_nwchem "$inputfile"
        ;;
      orca)
        exec_orca "$inputfile"
        ;;
    esac
  else
    echo "  $inputfile does not exist or is not readable."
    exit 1
  fi

  cd "$called_from"
done

# marathon <https://github.com/chemical-scripts/marathon>
# is licensed under the MIT License.
